name: Deploy AKS Zabbix Infrastructure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'Devops-Test'
  AZURE_LOCATION: 'eastus2'
  AZURE_SUBSCRIPTION_ID: 'd9b2a1cf-f99b-4f9e-a6cf-c79a078406bf'

jobs:
  # Infrastructure Deployment
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      aks-cluster-name: ${{ steps.deploy-infra.outputs.AKS_CLUSTER_NAME }}
      resource-group: ${{ steps.deploy-infra.outputs.AZURE_RESOURCE_GROUP }}
      container-registry: ${{ steps.deploy-infra.outputs.CONTAINER_REGISTRY_ENDPOINT }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Azure CLI
      run: |
        az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
        az account show

    - name: Install AZD
      uses: Azure/setup-azd@v1.0.0

    - name: Set AZD Environment Variables
      run: |
        azd env set AZURE_ENV_NAME "zabbix-aks-${{ github.run_number }}"
        azd env set AZURE_LOCATION "${{ env.AZURE_LOCATION }}"
        azd env set AZURE_SUBSCRIPTION_ID "${{ env.AZURE_SUBSCRIPTION_ID }}"
        azd env set AZURE_RESOURCE_GROUP "${{ env.AZURE_RESOURCE_GROUP }}"
        azd env set AZURE_PRINCIPAL_ID "$(az ad signed-in-user show --query id -o tsv)"
        azd env set AZURE_RESOURCE_TOKEN "$(echo $RANDOM | md5sum | head -c 8)"

    - name: Provision Infrastructure
      id: deploy-infra
      run: |
        azd provision --no-prompt
        
        # Capture outputs
        echo "AKS_CLUSTER_NAME=$(azd env get-value AKS_CLUSTER_NAME)" >> $GITHUB_OUTPUT
        echo "AZURE_RESOURCE_GROUP=$(azd env get-value AZURE_RESOURCE_GROUP)" >> $GITHUB_OUTPUT
        echo "CONTAINER_REGISTRY_ENDPOINT=$(azd env get-value CONTAINER_REGISTRY_ENDPOINT)" >> $GITHUB_OUTPUT

    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ steps.deploy-infra.outputs.AKS_CLUSTER_NAME }} \
          --overwrite-existing

    - name: Verify AKS connection
      run: |
        kubectl cluster-info
        kubectl get nodes

  # Deploy Zabbix Application
  deploy-zabbix:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
          --name ${{ needs.deploy-infrastructure.outputs.aks-cluster-name }} \
          --overwrite-existing

    - name: Install NGINX Ingress Controller
      run: |
        # Add NGINX Ingress Helm repository
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        
        # Install NGINX Ingress Controller
        helm install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx \
          --create-namespace \
          --set controller.replicaCount=2 \
          --set controller.service.type=LoadBalancer \
          --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
          --wait

    - name: Deploy Zabbix Namespace and Configuration
      run: |
        kubectl apply -f k8s/zabbix-config.yaml
        kubectl get namespace zabbix

    - name: Deploy MySQL Database
      run: |
        kubectl apply -f k8s/zabbix-mysql.yaml
        
        # Wait for MySQL to be ready
        kubectl wait --for=condition=ready pod -l app=zabbix-mysql -n zabbix --timeout=300s

    - name: Initialize Zabbix Database
      run: |
        # Wait for MySQL pod to be running
        kubectl wait --for=condition=ready pod -l app=zabbix-mysql -n zabbix --timeout=300s
        
        # Get MySQL pod name
        MYSQL_POD=$(kubectl get pods -n zabbix -l app=zabbix-mysql -o jsonpath='{.items[0].metadata.name}')
        
        # Download and import Zabbix schema
        kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "CREATE DATABASE IF NOT EXISTS zabbix CHARACTER SET utf8 COLLATE utf8_bin;"
        kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'%' IDENTIFIED BY 'zabbix123!';"
        kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "FLUSH PRIVILEGES;"

    - name: Deploy Zabbix Server Components
      run: |
        # Deploy Java Gateway first
        kubectl apply -f k8s/zabbix-additional.yaml
        kubectl wait --for=condition=available deployment/zabbix-java-gateway -n zabbix --timeout=300s
        
        # Deploy Zabbix Server
        kubectl apply -f k8s/zabbix-server.yaml
        kubectl wait --for=condition=available deployment/zabbix-server -n zabbix --timeout=300s

    - name: Deploy Zabbix Web Interface
      run: |
        kubectl apply -f k8s/zabbix-web.yaml
        kubectl wait --for=condition=available deployment/zabbix-web -n zabbix --timeout=300s

    - name: Deploy Ingress
      run: |
        kubectl apply -f k8s/zabbix-ingress.yaml
        
        # Wait for ingress to get an IP
        echo "Waiting for ingress to get external IP..."
        kubectl get ingress -n zabbix zabbix-ingress -w &
        sleep 60
        pkill kubectl

    - name: Get Application URLs
      run: |
        echo "=== Deployment Information ==="
        echo "Zabbix Web Interface URLs:"
        
        # Get LoadBalancer IP
        LB_IP=$(kubectl get service -n zabbix zabbix-web-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ ! -z "$LB_IP" ]; then
          echo "LoadBalancer IP: http://$LB_IP"
        fi
        
        # Get Ingress information
        echo "Ingress Configuration:"
        kubectl get ingress -n zabbix zabbix-ingress
        
        echo ""
        echo "=== DNS Configuration Required ==="
        echo "Please configure your DNS to point dal2-devmon-mgt.forescout.com to the LoadBalancer IP"
        echo ""
        echo "=== Default Zabbix Credentials ==="
        echo "Username: Admin"
        echo "Password: zabbix"
        echo ""
        echo "=== Important Security Notes ==="
        echo "1. Change default Zabbix admin password immediately"
        echo "2. Update database passwords in production"
        echo "3. Configure SSL certificate for HTTPS"

    - name: Verify Deployment
      run: |
        echo "=== Verifying Zabbix Deployment ==="
        kubectl get all -n zabbix
        
        echo ""
        echo "=== Pod Status ==="
        kubectl get pods -n zabbix -o wide
        
        echo ""
        echo "=== Service Status ==="
        kubectl get services -n zabbix
        
        echo ""
        echo "=== Ingress Status ==="
        kubectl get ingress -n zabbix

  # Security and Post-Deployment
  post-deployment:
    needs: [deploy-infrastructure, deploy-zabbix]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure Network Security
      run: |
        # Update NSG rules if needed
        echo "Configuring network security rules..."
        
        # Example: Restrict SSH access to specific IP ranges
        # az network nsg rule update \
        #   --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
        #   --nsg-name nsg-aks-* \
        #   --name AllowSSH \
        #   --source-address-prefixes "YOUR-OFFICE-IP/32"

    - name: Setup Monitoring and Alerts
      run: |
        echo "Setting up monitoring and alerts..."
        # Add any monitoring configuration here

    - name: Generate Deployment Report
      run: |
        echo "=== Deployment Summary Report ===" > deployment-report.md
        echo "**Date:** $(date)" >> deployment-report.md
        echo "**Environment:** Production" >> deployment-report.md
        echo "**AKS Cluster:** ${{ needs.deploy-infrastructure.outputs.aks-cluster-name }}" >> deployment-report.md
        echo "**Resource Group:** ${{ needs.deploy-infrastructure.outputs.resource-group }}" >> deployment-report.md
        echo "**Container Registry:** ${{ needs.deploy-infrastructure.outputs.container-registry }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "**Next Steps:**" >> deployment-report.md
        echo "1. Configure DNS for dal2-devmon-mgt.forescout.com" >> deployment-report.md
        echo "2. Upload SSL certificate" >> deployment-report.md
        echo "3. Change default passwords" >> deployment-report.md
        echo "4. Configure Zabbix monitoring templates" >> deployment-report.md
        
        cat deployment-report.md

    - name: Upload Deployment Report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md
