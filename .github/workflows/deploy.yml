name: Deploy AKS Zabbix Infrastructure (Terraform & ARM)

on:
  # Only run on manual trigger or when infrastructure files change
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - 'k8s/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'k8s/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Type of deployment'
        required: true
        default: 'application-only'
        type: choice
        options:
        - full
        - infrastructure-only
        - application-only
        - redeploy-clean
      infrastructure_method:
        description: 'Infrastructure deployment method'
        required: true
        default: 'terraform'
        type: choice
        options:
        - terraform
        - arm
        - both
      terraform_mode:
        description: 'Terraform execution mode'
        required: false
        default: 'plan-and-apply'
        type: choice
        options:
        - plan-only
        - plan-and-apply
        - apply-existing-plan
      force_powershell:
        description: 'Force PowerShell deployment (skip Azure CLI)'
        required: false
        default: false
        type: boolean
      reset_database:
        description: 'Reset Zabbix database (WARNING: destroys data)'
        required: false
        default: false
        type: boolean
      environment_suffix:
        description: 'Environment suffix (optional)'
        required: false
        default: ''
        type: string
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

env:
  AZURE_RESOURCE_GROUP: 'rg-devops-pops-eastus'
  AZURE_LOCATION: 'eastus'
  AZURE_SUBSCRIPTION_ID: 'd9b2a1cf-f99b-4f9e-a6cf-c79a078406bf'
  AKS_CLUSTER_NAME: 'aks-devops-eastus'
  CONTAINER_REGISTRY_NAME: 'acrdevopseastus'
  DEPLOYMENT_TYPE: ${{ github.event.inputs.deployment_type || 'application-only' }}
  INFRASTRUCTURE_METHOD: ${{ github.event.inputs.infrastructure_method || 'terraform' }}
  TERRAFORM_MODE: ${{ github.event.inputs.terraform_mode || 'plan-and-apply' }}
  FORCE_POWERSHELL: ${{ github.event.inputs.force_powershell || 'false' }}
  RESET_DATABASE: ${{ github.event.inputs.reset_database || 'false' }}
  DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
  ENV_SUFFIX: ${{ github.event.inputs.environment_suffix || '' }}

jobs:
  # Infrastructure Deployment
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.event.inputs.deployment_type == 'full' || github.event.inputs.deployment_type == 'infrastructure-only' || github.event.inputs.deployment_type == 'redeploy-clean' || github.event.inputs.deployment_type == '' || github.event.inputs.deployment_type == null }}
    outputs:
      aks-cluster-name: ${{ steps.deploy-infra.outputs.AKS_CLUSTER_NAME }}
      resource-group: ${{ steps.deploy-infra.outputs.AZURE_RESOURCE_GROUP }}
      container-registry: ${{ steps.deploy-infra.outputs.CONTAINER_REGISTRY_ENDPOINT }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Display Deployment Configuration
      run: |
        echo "=== Deployment Configuration ==="
        echo "Deployment Type: ${{ github.event.inputs.deployment_type || 'application-only' }}"
        echo "Infrastructure Method: ${{ github.event.inputs.infrastructure_method || 'terraform' }}"
        echo "Terraform Mode: ${{ github.event.inputs.terraform_mode || 'plan-and-apply' }}"
        echo "Force PowerShell: ${{ github.event.inputs.force_powershell || 'false' }}"
        echo "Reset Database: ${{ github.event.inputs.reset_database || 'false' }}"
        echo "Debug Mode: ${{ github.event.inputs.debug_mode || 'false' }}"
        echo "Environment Suffix: ${{ github.event.inputs.environment_suffix || 'none' }}"
        echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "Location: ${{ env.AZURE_LOCATION }}"
        echo "Run Number: ${{ github.run_number }}"
        echo "Actor: ${{ github.actor }}"
        echo "Triggered by: ${{ github.event_name }}"
        
        if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
          echo "DEBUG_MODE=true" >> $GITHUB_ENV
          echo "üêõ Debug mode enabled - detailed logging will be provided"
        fi

    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Azure CLI
      run: |
        az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
        az account show

    - name: Install Terraform
      run: |
        echo "üîß Installing Terraform..."
        
        # Download and install Terraform
        TERRAFORM_VERSION="1.6.0"
        curl -Lo terraform.zip "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        rm terraform.zip
        
        # Verify installation
        terraform version
        echo "‚úÖ Terraform installed successfully"

    - name: Validate Infrastructure Method Selection
      run: |
        echo "üîç Validating infrastructure deployment method..."
        echo "Selected method: ${{ env.INFRASTRUCTURE_METHOD }}"
        echo "Terraform mode: ${{ env.TERRAFORM_MODE }}"
        
        case "${{ env.INFRASTRUCTURE_METHOD }}" in
          "terraform")
            echo "‚úÖ Will use Terraform for infrastructure deployment"
            echo "DEPLOY_TERRAFORM=true" >> $GITHUB_ENV
            echo "DEPLOY_ARM=false" >> $GITHUB_ENV
            ;;
          "arm")
            echo "‚úÖ Will use ARM templates for infrastructure deployment"
            echo "DEPLOY_TERRAFORM=false" >> $GITHUB_ENV
            echo "DEPLOY_ARM=true" >> $GITHUB_ENV
            ;;
          "both")
            echo "‚úÖ Will try Terraform first, then ARM as fallback"
            echo "DEPLOY_TERRAFORM=true" >> $GITHUB_ENV
            echo "DEPLOY_ARM=true" >> $GITHUB_ENV
            ;;
          *)
            echo "‚ùå Invalid infrastructure method: ${{ env.INFRASTRUCTURE_METHOD }}"
            exit 1
            ;;
        esac
        
        # Set Terraform execution mode
        case "${{ env.TERRAFORM_MODE }}" in
          "plan-only")
            echo "üìã Will only create Terraform plan for review"
            echo "TF_PLAN_ONLY=true" >> $GITHUB_ENV
            echo "TF_APPLY_EXISTING=false" >> $GITHUB_ENV
            ;;
          "apply-existing-plan")
            echo "üöÄ Will apply existing Terraform plan"
            echo "TF_PLAN_ONLY=false" >> $GITHUB_ENV
            echo "TF_APPLY_EXISTING=true" >> $GITHUB_ENV
            ;;
          "plan-and-apply")
            echo "üìãüöÄ Will create plan and apply immediately"
            echo "TF_PLAN_ONLY=false" >> $GITHUB_ENV
            echo "TF_APPLY_EXISTING=false" >> $GITHUB_ENV
            ;;
          *)
            echo "‚ùå Invalid terraform mode: ${{ env.TERRAFORM_MODE }}"
            exit 1
            ;;
        esac

    - name: Prepare Terraform Environment
      if: ${{ env.INFRASTRUCTURE_METHOD == 'terraform' || env.INFRASTRUCTURE_METHOD == 'both' }}
      run: |
        echo "üîß Preparing Terraform environment..."
        
        # Navigate to Terraform directory
        cd infra/terraform
        
        # Generate consistent environment name (without run number to avoid resource conflicts)
        ENV_SUFFIX="${{ github.event.inputs.environment_suffix }}"
        if [ -n "$ENV_SUFFIX" ]; then
          ENV_NAME="zabbix-devops-${{ env.AZURE_LOCATION }}-$ENV_SUFFIX"
        else
          ENV_NAME="zabbix-devops-${{ env.AZURE_LOCATION }}"
        fi
        echo "Environment name: $ENV_NAME"
        echo "This will create resources with naming pattern: resourcename-devops-${{ env.AZURE_LOCATION }}"
        
        # Create terraform.tfvars file
        cat > terraform.tfvars << EOF
        resource_group_name = "${{ env.AZURE_RESOURCE_GROUP }}"
        location           = "${{ env.AZURE_LOCATION }}"
        environment_name   = "$ENV_NAME"
        
        # AKS Configuration
        kubernetes_version = "1.32"
        
        # Node Pool Configuration
        aks_system_node_count = 2
        aks_user_node_count   = 3
        aks_user_node_min_count = 2
        aks_user_node_max_count = 10
        
        # VM Sizes
        aks_system_vm_size = "Standard_D2s_v3"
        aks_user_vm_size   = "Standard_D4s_v3"
        
        # Feature Flags
        enable_auto_scaling  = true
        enable_azure_policy  = true
        enable_log_analytics = true
        
        # Monitoring
        log_analytics_retention_days = 30
        EOF
        
        echo "‚úÖ Terraform environment prepared"
        
        # Store environment name for later steps
        echo "TERRAFORM_ENV_NAME=$ENV_NAME" >> $GITHUB_ENV

    - name: Deploy Infrastructure with Terraform
      id: deploy-infra-terraform
      if: ${{ env.INFRASTRUCTURE_METHOD == 'terraform' || env.INFRASTRUCTURE_METHOD == 'both' }}
      continue-on-error: true
      run: |
        echo "üöÄ Starting Terraform deployment process..."
        echo "Mode: ${{ env.TERRAFORM_MODE }}"
        
        cd infra/terraform
        
        # Initialize Terraform
        echo "üì¶ Initializing Terraform..."
        terraform init
        
        # Import existing resources if they exist (ignore errors for non-existent resources)
        echo "üì¶ Attempting to import existing resources..."
        set +e  # Don't exit on import errors
        
        # List all resources in the resource group first
        echo "üîç Listing all resources in resource group ${{ env.AZURE_RESOURCE_GROUP }}..."
        az resource list --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --output table || echo "‚ö†Ô∏è Failed to list resources"
        
        # Check current Terraform state
        echo "üîç Current Terraform state:"
        terraform state list || echo "No resources in state yet"
        
        # Check which specific resources exist in Azure
        echo "üîç Checking for specific resources that are causing conflicts..."
        
        # Function to check resource existence and get actual names
        # Simple resource listing
        echo "üîç Listing resources in resource group ${{ env.AZURE_RESOURCE_GROUP }}..."
        az resource list --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --output table || echo "‚ö†Ô∏è Failed to list resources"
        
        # Skip complex resource discovery - we know the exact resource names
        echo "ÔøΩ Using known resource names for import..."
        
        # Import resources - simplified approach with better error handling
        echo "üì¶ Importing resources using a simplified, robust approach..."
        
        # Function to safely import a resource with improved error handling
        safe_import() {
            local tf_resource="$1"
            local azure_id="$2"
            local display_name="$3"
            
            echo ""
            echo "ÔøΩ Processing $display_name..."
            echo "   Terraform resource: $tf_resource"
            echo "   Azure resource ID: $azure_id"
            
            # Check if resource is already in Terraform state
            if terraform state show "$tf_resource" >/dev/null 2>&1; then
                echo "   ‚ÑπÔ∏è Resource already in Terraform state - verifying..."
                # Get the actual ID from Terraform state (different approach)
                local current_id=""
                current_id=$(terraform state show "$tf_resource" 2>/dev/null | grep -E '^\s*id\s*=' | head -1 | sed -E 's/.*=\s*"([^"]+)".*/\1/' || echo "")
                
                if [ -n "$current_id" ] && [ "$current_id" = "$azure_id" ]; then
                    echo "   ‚úÖ $display_name already correctly imported"
                    return 0
                else
                    echo "   ‚ö†Ô∏è State exists but may point to different resource or be corrupted"
                    echo "      Current ID in state: $current_id"
                    echo "      Expected ID: $azure_id"
                    echo "      Removing and re-importing..."
                    terraform state rm "$tf_resource" >/dev/null 2>&1 || echo "      Note: Failed to remove from state (might not exist)"
                fi
            fi
            
            # Verify the Azure resource exists
            echo "   üîç Verifying resource exists in Azure..."
            if ! az resource show --ids "$azure_id" >/dev/null 2>&1; then
                echo "   ‚ùå Resource not found in Azure - skipping import"
                return 1
            fi
            echo "   ‚úÖ Resource verified in Azure"
            
            # Attempt the import
            echo "   ÔøΩ Importing $display_name into Terraform state..."
            local import_output=""
            if import_output=$(terraform import "$tf_resource" "$azure_id" 2>&1); then
                echo "   ‚úÖ Successfully imported $display_name"
                return 0
            else
                echo "   ‚ùå Import failed for $display_name"
                echo "      Error details:"
                echo "$import_output" | sed 's/^/        /' | head -10
                echo "      Common causes:"
                echo "      - Resource definition in Terraform doesn't match actual Azure resource"
                echo "      - Missing dependencies in Terraform state"
                echo "      - Resource provider registration issues"
                echo "      - Permissions issues"
                echo "      Continuing with other imports..."
                return 1
            fi
        }
        
        
        # Import critical resources in dependency order
        echo ""
        echo "üìã Starting systematic resource import in dependency order..."
        
        # 1. Import Managed Identity (fundamental dependency for AKS)
        safe_import "azurerm_user_assigned_identity.aks" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/id-devops-eastus" \
            "Managed Identity"
        
        # 2. Import Log Analytics workspace (independent resource)
        safe_import "azurerm_log_analytics_workspace.main[0]" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.OperationalInsights/workspaces/law-devops-eastus" \
            "Log Analytics Workspace"
        
        # 3. Import Container Registry (independent resource)
        safe_import "azurerm_container_registry.main" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/acrdevopseastus" \
            "Container Registry"
        
        # 4. Import Virtual Network (required for subnets)
        safe_import "azurerm_virtual_network.main" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-devops-eastus" \
            "Virtual Network"
        
        # 5. Import Network Security Groups (independent, but required for associations)
        safe_import "azurerm_network_security_group.aks" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/networkSecurityGroups/nsg-aks-devops-eastus" \
            "AKS Network Security Group"
        
        safe_import "azurerm_network_security_group.appgw" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/networkSecurityGroups/nsg-appgw-devops-eastus" \
            "App Gateway Network Security Group"
        
        # 6. Import Public IP (independent, but required for App Gateway)
        safe_import "azurerm_public_ip.appgw" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/publicIPAddresses/pip-appgw-devops-eastus" \
            "Application Gateway Public IP"
        
        # 7. Import Subnets (depend on VNet)
        safe_import "azurerm_subnet.aks" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-devops-eastus/subnets/subnet-aks-devops-eastus" \
            "AKS Subnet"
        
        safe_import "azurerm_subnet.appgw" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-devops-eastus/subnets/subnet-appgw-devops-eastus" \
            "App Gateway Subnet"
        
        # 8. Import NSG associations (depend on both NSGs and Subnets)
        safe_import "azurerm_subnet_network_security_group_association.aks" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-devops-eastus/subnets/subnet-aks-devops-eastus" \
            "AKS NSG Association"
        
        safe_import "azurerm_subnet_network_security_group_association.appgw" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/virtualNetworks/vnet-devops-eastus/subnets/subnet-appgw-devops-eastus" \
            "App Gateway NSG Association"
        
        # 9. Import Application Gateway (depends on subnet and public IP)
        safe_import "azurerm_application_gateway.main" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.Network/applicationGateways/appgw-devops-eastus" \
            "Application Gateway"
        
        # 10. Import AKS cluster (depends on managed identity, subnet, and optionally Log Analytics)
        safe_import "azurerm_kubernetes_cluster.main" \
            "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCE_GROUP }}/providers/Microsoft.ContainerService/managedClusters/aks-devops-eastus" \
            "AKS Cluster"
        
        
        set -e  # Re-enable exit on error
        echo ""
        echo "‚úÖ Import process completed"
        
        # Show comprehensive state and comparison
        echo ""
        echo "üìã Post-Import Analysis:"
        echo "========================"
        
        # Show final Terraform state
        echo "üîç Resources in Terraform state:"
        if terraform_state_list=$(terraform state list | sort); then
            if [ -n "$terraform_state_list" ]; then
                echo "$terraform_state_list" | sed 's/^/  /'
                terraform_count=$(echo "$terraform_state_list" | wc -l)
            else
                echo "  (No resources in Terraform state)"
                terraform_count=0
            fi
        else
            echo "  ‚ùå Failed to list Terraform state"
            terraform_count="unknown"
        fi
        
        # Show Azure resources in the resource group
        echo ""
        echo "üîç Resources in Azure resource group ${{ env.AZURE_RESOURCE_GROUP }}:"
        if azure_resources=$(az resource list --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" --query '[].{Name:name, Type:type}' --output tsv 2>/dev/null | sort); then
            if [ -n "$azure_resources" ]; then
                echo "$azure_resources" | sed 's/^/  /'
                azure_count=$(echo "$azure_resources" | wc -l)
            else
                echo "  (No resources found in Azure resource group)"
                azure_count=0
            fi
        else
            echo "  ‚ùå Failed to list Azure resources"
            azure_count="unknown"
        fi
        
        echo ""
        echo "üìä Import Summary:"
        echo "  Resources in Terraform state: $terraform_count"
        echo "  Resources in Azure RG: $azure_count"
        
        # If counts differ significantly, provide guidance
        if [ "$terraform_count" != "unknown" ] && [ "$azure_count" != "unknown" ] && [ "$terraform_count" -lt $((azure_count - 5)) ]; then
            echo "  ‚ö†Ô∏è  Significant difference detected. This could indicate:"
            echo "     - Some Azure resources are not managed by this Terraform config"
            echo "     - Import failures due to configuration mismatches"
            echo "     - Resources created outside of Terraform"
            echo "     - This is normal if not all Azure resources are supposed to be in Terraform"
        fi
        
        # Validate configuration
        echo "üîç Validating Terraform configuration..."
        if ! terraform validate; then
          echo "‚ùå Terraform validation failed"
          exit 1
        fi
        echo "‚úÖ Terraform configuration is valid"
        
        # Generate plan file name with timestamp
        PLAN_FILE="tfplan-${{ github.run_number }}-$(date +%s)"
        echo "PLAN_FILE=$PLAN_FILE" >> $GITHUB_ENV
        
        # Create plan
        echo "üìã Creating Terraform plan after import..."
        set +e  # Don't exit on plan errors
        terraform plan -out=$PLAN_FILE -detailed-exitcode 2>&1 | tee terraform-plan-output.txt
        PLAN_EXIT_CODE=${PIPESTATUS[0]}
        set -e  # Re-enable exit on error
        
        if [ $PLAN_EXIT_CODE -eq 1 ]; then
          echo ""
          echo "‚ùå Terraform plan failed due to errors"
          echo "ÔøΩ Plan error details:"
          echo "====================="
          cat terraform-plan-output.txt | tail -50
          echo ""
          echo "üîç Common causes of plan failures after import:"
          echo "  - Terraform resource configuration doesn't match actual Azure resource"
          echo "  - Missing or incorrect resource dependencies"
          echo "  - Imported resource has properties not defined in Terraform"
          echo "  - Azure resource was modified outside of Terraform"
          echo ""
          echo "üí° Troubleshooting steps:"
          echo "  1. Check if resource definitions in Terraform match actual Azure resources"
          echo "  2. Verify all required properties are defined in Terraform configuration"
          echo "  3. Consider updating Terraform config to match current Azure resource state"
          echo "  4. Check for missing dependencies between resources"
          exit 1
        elif [ $PLAN_EXIT_CODE -eq 2 ]; then
          echo "üìã Terraform plan created with changes to apply"
          echo "PLAN_HAS_CHANGES=true" >> $GITHUB_ENV
          echo "ÔøΩ Plan summary (first 30 lines):"
          terraform show -no-color $PLAN_FILE 2>/dev/null | head -30 || echo "Could not show plan details"
        else
          echo "üìã Terraform plan created with no changes"
          echo "PLAN_HAS_CHANGES=false" >> $GITHUB_ENV
        fi
        
        # Display plan summary
        echo "üìã Terraform Plan Summary:"
        terraform show -no-color $PLAN_FILE
        
        # Save plan as artifact for manual review
        echo "üíæ Saving plan for review..."
        terraform show -json $PLAN_FILE > terraform-plan.json
        terraform show -no-color $PLAN_FILE > terraform-plan.txt
        
        # Check execution mode
        if [ "${{ env.TERRAFORM_MODE }}" = "plan-only" ]; then
          echo "üìã Plan-only mode: Terraform plan created and saved"
          echo "üîç Review the plan and then run the workflow with 'apply-existing-plan' mode to apply"
          echo "DEPLOYMENT_SUCCESS=plan-created" >> $GITHUB_OUTPUT
          echo "PLAN_FILE=$PLAN_FILE" >> $GITHUB_OUTPUT
        elif [ "${{ env.TERRAFORM_MODE }}" = "apply-existing-plan" ]; then
          # Look for existing plan file
          EXISTING_PLAN=$(ls -t tfplan-* 2>/dev/null | head -n 1 || echo "")
          if [ -z "$EXISTING_PLAN" ]; then
            echo "‚ùå No existing plan found. Please run in 'plan-only' mode first."
            echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_OUTPUT
          else
            echo "üöÄ Applying existing plan: $EXISTING_PLAN"
            if terraform apply -auto-approve "$EXISTING_PLAN"; then
              echo "‚úÖ Terraform apply completed successfully"
              echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Terraform apply failed"
              echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_OUTPUT
            fi
          fi
        else
          # plan-and-apply mode
          echo "üöÄ Applying Terraform plan immediately..."
          if terraform apply -auto-approve $PLAN_FILE; then
            echo "‚úÖ Terraform deployment successful"
            echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Terraform deployment failed"
            echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_OUTPUT
          fi
        fi
        
        # Capture outputs if deployment was successful
        if [ "${{ env.TERRAFORM_MODE }}" != "plan-only" ] && [ "$(echo $GITHUB_OUTPUT | grep 'DEPLOYMENT_SUCCESS=true')" ]; then
          echo "üìã Extracting Terraform outputs..."
          set +e  # Don't exit if output extraction fails
          AKS_CLUSTER_NAME=$(terraform output -raw AKS_CLUSTER_NAME 2>/dev/null || echo "")
          AZURE_RESOURCE_GROUP=$(terraform output -raw AZURE_RESOURCE_GROUP 2>/dev/null || echo "${{ env.AZURE_RESOURCE_GROUP }}")
          CONTAINER_REGISTRY_ENDPOINT=$(terraform output -raw CONTAINER_REGISTRY_ENDPOINT 2>/dev/null || echo "")
          set -e
          
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "CONTAINER_REGISTRY_ENDPOINT=$CONTAINER_REGISTRY_ENDPOINT" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_METHOD=terraform" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Infrastructure deployed successfully with Terraform!"
          echo "   AKS Cluster: $AKS_CLUSTER_NAME"
          echo "   Resource Group: $AZURE_RESOURCE_GROUP"
          echo "   Container Registry: $CONTAINER_REGISTRY_ENDPOINT"
        fi

    - name: Upload Terraform Plan Artifacts
      if: ${{ env.INFRASTRUCTURE_METHOD == 'terraform' || env.INFRASTRUCTURE_METHOD == 'both' }}
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.run_number }}
        path: |
          infra/terraform/terraform-plan.json
          infra/terraform/terraform-plan.txt
          infra/terraform/tfplan-*
        retention-days: 7

    - name: Pre-deployment Diagnostics
      if: ${{ steps.deploy-infra-terraform.outputs.DEPLOYMENT_SUCCESS != 'true' && env.INFRASTRUCTURE_METHOD == 'arm' }}
      run: |
        echo "üîç Running pre-deployment diagnostics for ARM template fallback..."
        
        # Check resource group access
        echo "Checking resource group access..."
        az group show --name ${{ env.AZURE_RESOURCE_GROUP }} --output table || {
          echo "‚ùå Cannot access resource group ${{ env.AZURE_RESOURCE_GROUP }}"
          exit 1
        }
        
        # Check resource providers
        echo "Checking required resource providers..."
        REQUIRED_PROVIDERS="Microsoft.ContainerService Microsoft.Network Microsoft.ContainerRegistry Microsoft.ManagedIdentity Microsoft.OperationalInsights"
        for provider in $REQUIRED_PROVIDERS; do
          STATUS=$(az provider show --namespace $provider --query registrationState -o tsv)
          echo "  $provider: $STATUS"
          if [ "$STATUS" != "Registered" ]; then
            echo "‚ö†Ô∏è Registering provider $provider..."
            az provider register --namespace $provider --wait
          fi
        done
        
        echo "‚úÖ Pre-deployment diagnostics completed"

    - name: Validate Terraform Configuration (if using Terraform)
      if: ${{ env.INFRASTRUCTURE_METHOD == 'terraform' || env.INFRASTRUCTURE_METHOD == 'both' }}
      run: |
        echo "üîç Validating Terraform configuration..."
        cd infra/terraform
        
        # Validate syntax
        if ! terraform validate; then
          echo "‚ùå Terraform validation failed"
          exit 1
        fi
        echo "‚úÖ Terraform configuration is valid"

    - name: Deploy Infrastructure with ARM Template (Fallback)
      id: deploy-infra-arm
      if: ${{ env.INFRASTRUCTURE_METHOD == 'arm' || (env.INFRASTRUCTURE_METHOD == 'both' && steps.deploy-infra-terraform.outputs.DEPLOYMENT_SUCCESS != 'true') }}
      run: |
        echo "üöÄ Deploying infrastructure using ARM template..."
        
        # Generate deployment name with timestamp
        TIMESTAMP=$(date +%s)
        ARM_DEPLOYMENT_NAME="zabbix-arm-deploy-${{ github.run_number }}-$TIMESTAMP"
        echo "ARM Deployment name: $ARM_DEPLOYMENT_NAME"
        
        # Generate environment name with DevOps naming convention (consistent with Terraform)
        ENV_SUFFIX="${{ github.event.inputs.environment_suffix }}"
        if [ -n "$ENV_SUFFIX" ]; then
          DEPLOYMENT_ENV_NAME="zabbix-devops-${{ env.AZURE_LOCATION }}-$ENV_SUFFIX"
        else
          DEPLOYMENT_ENV_NAME="zabbix-devops-${{ env.AZURE_LOCATION }}"
        fi
        
        echo "Deployment environment name: $DEPLOYMENT_ENV_NAME"
        echo "Resources will be named with pattern: resourcename-devops-${{ env.AZURE_LOCATION }}"
        
        # Deploy ARM template
        set +e  # Don't exit on error
        ARM_DEPLOYMENT_OUTPUT=$(timeout 1800 az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file infra/main-arm.json \
          --parameters environmentName="$DEPLOYMENT_ENV_NAME" \
                       location="${{ env.AZURE_LOCATION }}" \
          --name "$ARM_DEPLOYMENT_NAME" \
          --mode Incremental \
          --output json \
          --only-show-errors 2>&1)
        ARM_DEPLOYMENT_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        if [ $ARM_DEPLOYMENT_EXIT_CODE -ne 0 ]; then
          echo "‚ùå ARM template deployment failed with exit code $ARM_DEPLOYMENT_EXIT_CODE"
          echo "Error output:"
          echo "$ARM_DEPLOYMENT_OUTPUT"
          echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ ARM template deployment successful!"
          
          # Extract outputs
          AKS_CLUSTER_NAME=$(echo "$ARM_DEPLOYMENT_OUTPUT" | jq -r '.properties.outputs.AKS_CLUSTER_NAME.value // empty')
          CONTAINER_REGISTRY_ENDPOINT=$(echo "$ARM_DEPLOYMENT_OUTPUT" | jq -r '.properties.outputs.CONTAINER_REGISTRY_ENDPOINT.value // empty')
          
          if [ -z "$AKS_CLUSTER_NAME" ] || [ "$AKS_CLUSTER_NAME" = "null" ]; then
            echo "‚ùå Failed to get AKS cluster name from ARM deployment outputs"
            echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_OUTPUT
          else
            # Set outputs
            echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_OUTPUT
            echo "AZURE_RESOURCE_GROUP=${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_OUTPUT
            echo "CONTAINER_REGISTRY_ENDPOINT=$CONTAINER_REGISTRY_ENDPOINT" >> $GITHUB_OUTPUT
            echo "DEPLOYMENT_METHOD=arm" >> $GITHUB_OUTPUT
            echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_OUTPUT
            
            echo "‚úÖ ARM Infrastructure deployed successfully!"
            echo "   AKS Cluster: $AKS_CLUSTER_NAME"
            echo "   Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
            echo "   Container Registry: $CONTAINER_REGISTRY_ENDPOINT"
          fi
        fi

    - name: Set Infrastructure Outputs
      id: deploy-infra
      run: |
        # Use outputs from whichever deployment method succeeded
        if [ "${{ steps.deploy-infra-terraform.outputs.DEPLOYMENT_SUCCESS }}" = "true" ]; then
          echo "Using Terraform deployment outputs"
          echo "AKS_CLUSTER_NAME=${{ steps.deploy-infra-terraform.outputs.AKS_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
          echo "AZURE_RESOURCE_GROUP=${{ steps.deploy-infra-terraform.outputs.AZURE_RESOURCE_GROUP }}" >> $GITHUB_OUTPUT
          echo "CONTAINER_REGISTRY_ENDPOINT=${{ steps.deploy-infra-terraform.outputs.CONTAINER_REGISTRY_ENDPOINT }}" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Used Terraform for deployment" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.deploy-infra-arm.outputs.DEPLOYMENT_SUCCESS }}" = "true" ]; then
          echo "Using ARM template deployment outputs"
          echo "AKS_CLUSTER_NAME=${{ steps.deploy-infra-arm.outputs.AKS_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
          echo "AZURE_RESOURCE_GROUP=${{ steps.deploy-infra-arm.outputs.AZURE_RESOURCE_GROUP }}" >> $GITHUB_OUTPUT
          echo "CONTAINER_REGISTRY_ENDPOINT=${{ steps.deploy-infra-arm.outputs.CONTAINER_REGISTRY_ENDPOINT }}" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Used ARM template for deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå All deployment methods failed or returned empty outputs" >> $GITHUB_STEP_SUMMARY
          echo "Terraform success: ${{ steps.deploy-infra-terraform.outputs.DEPLOYMENT_SUCCESS }}"
          echo "ARM success: ${{ steps.deploy-infra-arm.outputs.DEPLOYMENT_SUCCESS }}"
          echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Display Deployment Summary
      run: |
        echo ""
        echo "=== Final Deployment Results ==="
        if [ "${{ steps.deploy-infra-terraform.outputs.DEPLOYMENT_SUCCESS }}" = "true" ]; then
          echo "‚úÖ Deployment Method: Terraform"
          echo "AKS Cluster Name: ${{ steps.deploy-infra-terraform.outputs.AKS_CLUSTER_NAME }}"
          echo "Resource Group: ${{ steps.deploy-infra-terraform.outputs.AZURE_RESOURCE_GROUP }}"
          echo "Container Registry: ${{ steps.deploy-infra-terraform.outputs.CONTAINER_REGISTRY_ENDPOINT }}"
        elif [ "${{ steps.deploy-infra-arm.outputs.DEPLOYMENT_SUCCESS }}" = "true" ]; then
          echo "‚úÖ Deployment Method: ARM Template"
          echo "AKS Cluster Name: ${{ steps.deploy-infra-arm.outputs.AKS_CLUSTER_NAME }}"
          echo "Resource Group: ${{ steps.deploy-infra-arm.outputs.AZURE_RESOURCE_GROUP }}"
          echo "Container Registry: ${{ steps.deploy-infra-arm.outputs.CONTAINER_REGISTRY_ENDPOINT }}"
        else
          echo "‚ùå No successful deployment to display"
        fi

    - name: Get AKS credentials
      if: steps.deploy-infra.outputs.DEPLOYMENT_SUCCESS == 'true'
      run: |
        echo "üîë Getting AKS credentials..."
        echo "Cluster: ${{ env.AKS_CLUSTER_NAME }}"
        echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        
        az aks get-credentials \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing

    - name: Verify AKS connection
      if: steps.deploy-infra.outputs.DEPLOYMENT_SUCCESS == 'true'
      run: |
        echo "üîç Verifying AKS cluster connection..."
        kubectl cluster-info
        kubectl get nodes
        kubectl get namespaces

  # Deploy Zabbix Application
  deploy-zabbix:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: production
    if: ${{ always() && (github.event.inputs.deployment_type == 'full' || github.event.inputs.deployment_type == 'application-only' || github.event.inputs.deployment_type == 'redeploy-clean' || github.event.inputs.deployment_type == '' || github.event.inputs.deployment_type == null) && (needs.deploy-infrastructure.result == 'success' || github.event.inputs.deployment_type == 'application-only') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Install and Setup kubectl
      run: |
        echo "üîß Setting up kubectl and Helm..."
        
        # Install kubectl if not available
        if ! command -v kubectl &> /dev/null; then
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        fi
        
        # Install Helm if not available
        if ! command -v helm &> /dev/null; then
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        fi
        
        echo "‚úÖ kubectl and Helm are ready"

    - name: Get AKS credentials
      run: |
        echo "üîë Getting AKS credentials for application deployment..."
        echo "Cluster: ${{ env.AKS_CLUSTER_NAME }}"
        echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        
        az aks get-credentials \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        # Verify connection
        kubectl cluster-info
        kubectl get nodes
        echo "‚úÖ AKS connection verified"

    - name: Install Application Gateway Ingress Controller
      run: |
        echo "üöÄ Installing Application Gateway Ingress Controller (AGIC)..."
        
        # Calculate Application Gateway name
        APPGW_NAME="appgw-devops-eastus"
        echo "Using Application Gateway: $APPGW_NAME"
        
        # Add AGIC Helm repository
        helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
        helm repo update
        
        # Create namespace for AGIC
        kubectl create namespace agic --dry-run=client -o yaml | kubectl apply -f -
        
        # Install AGIC
        helm install agic application-gateway-kubernetes-ingress/ingress-azure \
          --namespace agic \
          --set appgw.name=$APPGW_NAME \
          --set appgw.resourceGroup=${{ env.AZURE_RESOURCE_GROUP }} \
          --set appgw.subscriptionId=${{ env.AZURE_SUBSCRIPTION_ID }} \
          --set appgw.usePrivateIP=false \
          --set kubernetes.watchNamespace=zabbix \
          --set armAuth.type=servicePrincipal \
          --set armAuth.secretJSON=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | base64 -w0) \
          --wait || {
          echo "‚ö†Ô∏è AGIC installation failed, falling back to NGINX Ingress..."
          
          # Fallback to NGINX Ingress Controller
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.replicaCount=2 \
            --set controller.service.type=LoadBalancer \
            --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz \
            --wait
        }
        
        echo "‚úÖ Ingress controller installation completed"

    - name: Deploy Zabbix Namespace and Configuration
      run: |
        kubectl apply -f k8s/zabbix-config.yaml
        kubectl get namespace zabbix

    - name: Cleanup Existing Zabbix Resources (Conditional)
      if: ${{ github.event.inputs.deployment_type == 'redeploy-clean' || github.event.inputs.reset_database == 'true' }}
      run: |
        echo "üßπ Cleaning up existing Zabbix resources for fresh deployment..."
        echo "Deployment Type: ${{ github.event.inputs.deployment_type }}"
        echo "Reset Database: ${{ github.event.inputs.reset_database }}"
        
        # Delete Zabbix deployments and services
        kubectl delete deployment --all -n zabbix --ignore-not-found=true
        kubectl delete service --all -n zabbix --ignore-not-found=true
        kubectl delete ingress --all -n zabbix --ignore-not-found=true
        kubectl delete configmap --all -n zabbix --ignore-not-found=true
        kubectl delete secret --all -n zabbix --ignore-not-found=true
        
        # Wait for pods to terminate
        kubectl wait --for=delete pods --all -n zabbix --timeout=120s || true
        
        # Clean up PVCs if database reset is requested
        if [ "${{ github.event.inputs.reset_database }}" = "true" ]; then
          echo "‚ö†Ô∏è RESETTING DATABASE - All data will be lost!"
          kubectl delete pvc -n zabbix --all --ignore-not-found=true
        fi
        
        echo "‚úÖ Cleanup completed"

    - name: Smart Cleanup for Regular Deployments
      if: ${{ github.event.inputs.deployment_type != 'redeploy-clean' && github.event.inputs.reset_database != 'true' }}
      run: |
        echo "üîÑ Performing smart cleanup (preserving data)..."
        
        # Create namespace if it doesn't exist
        kubectl create namespace zabbix --dry-run=client -o yaml | kubectl apply -f -
        
        # Only delete deployments and services, keep PVCs and secrets
        kubectl delete deployment --all -n zabbix --ignore-not-found=true
        kubectl delete service --all -n zabbix --ignore-not-found=true
        kubectl delete ingress --all -n zabbix --ignore-not-found=true
        
        # Wait for pods to terminate (but not MySQL pods)
        kubectl wait --for=delete pods -l app!=zabbix-mysql -n zabbix --timeout=60s || echo "‚ö†Ô∏è Some pods may still be terminating"
        
        echo "‚úÖ Smart cleanup completed - data preserved"

    - name: Deploy MySQL Database
      run: |
        kubectl apply -f k8s/zabbix-mysql.yaml
        
        # Wait for MySQL to be ready
        kubectl wait --for=condition=ready pod -l app=zabbix-mysql -n zabbix --timeout=600s

    - name: Initialize Zabbix Database with Complete Setup
      run: |
        echo "üóÑÔ∏è Initializing Zabbix database with complete schema and users..."
        
        # Wait for MySQL pod to be running
        kubectl wait --for=condition=ready pod -l app=zabbix-mysql -n zabbix --timeout=300s
        
        # Get MySQL pod name
        MYSQL_POD=$(kubectl get pods -n zabbix -l app=zabbix-mysql -o jsonpath='{.items[0].metadata.name}')
        echo "MySQL Pod: $MYSQL_POD"
        
        # Check if database exists and has data
        DB_EXISTS=$(kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='zabbix';" 2>/dev/null | tail -n 1 || echo "0")
        
        # Force database reset if requested
        if [ "${{ github.event.inputs.reset_database }}" = "true" ]; then
          echo "‚ö†Ô∏è Force database reset requested - dropping existing database"
          DB_EXISTS="0"
        fi
        
        if [ "$DB_EXISTS" -gt "10" ]; then
          echo "‚úÖ Zabbix database already exists with $DB_EXISTS tables"
          if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
            echo "üêõ Existing tables:"
            kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "SHOW TABLES FROM zabbix;" || true
          fi
          echo "Skipping database initialization"
        else
          echo "üîß Setting up fresh Zabbix database..."
          
          # Create database and user
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "DROP DATABASE IF EXISTS zabbix;"
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "CREATE DATABASE zabbix CHARACTER SET utf8 COLLATE utf8_bin;"
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'%' IDENTIFIED BY 'zabbix123!';"
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "FLUSH PRIVILEGES;"
          
          # Apply the database initialization job for complete schema setup
          kubectl apply -f k8s/zabbix-db-init-direct.yaml
          
          # Wait for initialization job to complete
          kubectl wait --for=condition=complete job/zabbix-db-init -n zabbix --timeout=600s || {
            echo "‚ö†Ô∏è Database initialization job didn't complete, checking logs..."
            kubectl logs job/zabbix-db-init -n zabbix || true
            echo "Continuing with manual setup..."
          }
          
          # Verify database schema was created
          TABLE_COUNT=$(kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='zabbix';" 2>/dev/null | tail -n 1 || echo "0")
          echo "Database tables created: $TABLE_COUNT"
          
          if [ "$TABLE_COUNT" -lt "10" ]; then
            echo "‚ùå Database initialization failed, manual intervention required"
            exit 1
          fi
          
          # Ensure admin user exists
          ADMIN_EXISTS=$(kubectl exec -n zabbix $MYSQL_POD -- mysql -u zabbix -pzabbix123! zabbix -e "SELECT COUNT(*) FROM users WHERE username='Admin';" 2>/dev/null | tail -n 1 || echo "0")
          
          if [ "$ADMIN_EXISTS" -eq "0" ]; then
            echo "üîß Creating default Admin user..."
            kubectl exec -n zabbix $MYSQL_POD -- mysql -u zabbix -pzabbix123! zabbix -e "
              INSERT INTO users (userid, username, name, surname, passwd, url, autologin, autologout, lang, refresh, theme, attempt_failed, attempt_ip, attempt_clock, rows_per_page)
              VALUES (1, 'Admin', 'Zabbix', 'Administrator', '5fce1b3e34b520afeffb37ce08c7cd66', '', 1, '15m', 'en_US', '30s', 'default', 0, '', 0, 50)
              ON DUPLICATE KEY UPDATE passwd='5fce1b3e34b520afeffb37ce08c7cd66';
            "
            
            # Ensure Super Admin role exists and is assigned
            kubectl exec -n zabbix $MYSQL_POD -- mysql -u zabbix -pzabbix123! zabbix -e "
              INSERT IGNORE INTO role (roleid, name, type, readonly) VALUES (3, 'Super admin role', 3, 1);
              INSERT IGNORE INTO user_role (userid, roleid) VALUES (1, 3);
            "
            
            echo "‚úÖ Admin user created with default password 'zabbix'"
          fi
          
          # Create guest user and role
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u zabbix -pzabbix123! zabbix -e "
            INSERT IGNORE INTO users (userid, username, name, surname, passwd, url, autologin, autologout, lang, refresh, theme, attempt_failed, attempt_ip, attempt_clock, rows_per_page)
            VALUES (2, 'guest', '', '', 'd41d8cd98f00b204e9800998ecf8427e', '', 0, '15m', 'en_US', '30s', 'default', 0, '', 0, 50);
            
            INSERT IGNORE INTO role (roleid, name, type, readonly) VALUES (1, 'Guest role', 1, 1);
            INSERT IGNORE INTO user_role (userid, roleid) VALUES (2, 1);
            
            INSERT IGNORE INTO usrgrp (usrgrpid, name, gui_access, users_status, debug_mode)
            VALUES (7, 'Guests', 0, 0, 0), (9, 'Enabled debug mode', 0, 0, 1);
            
            INSERT IGNORE INTO users_groups (id, usrgrpid, userid) VALUES (1, 7, 1), (2, 9, 1);
          "
          
          echo "‚úÖ Database initialization completed successfully"
        fi

    - name: Deploy Zabbix Server Components
      run: |
        # Deploy Java Gateway first
        kubectl apply -f k8s/zabbix-additional.yaml
        kubectl wait --for=condition=available deployment/zabbix-java-gateway -n zabbix --timeout=300s
        
        # Deploy Zabbix Server
        kubectl apply -f k8s/zabbix-server.yaml
        kubectl wait --for=condition=available deployment/zabbix-server -n zabbix --timeout=300s

    - name: Deploy Zabbix Web Interface
      run: |
        kubectl apply -f k8s/zabbix-web.yaml
        kubectl wait --for=condition=available deployment/zabbix-web -n zabbix --timeout=300s

    - name: Deploy Ingress
      run: |
        kubectl apply -f k8s/zabbix-ingress.yaml
        
        # Wait for ingress to get an IP
        echo "Waiting for ingress to get external IP..."
        kubectl get ingress -n zabbix zabbix-ingress -w &
        sleep 60
        pkill kubectl

    - name: Get Application URLs
      run: |
        echo "=== Deployment Information ==="
        echo "Zabbix Web Interface URLs:"
        
        # Get LoadBalancer IP
        LB_IP=$(kubectl get service -n zabbix zabbix-web-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ ! -z "$LB_IP" ]; then
          echo "LoadBalancer IP: http://$LB_IP"
        fi
        
        # Get Ingress information
        echo "Ingress Configuration:"
        kubectl get ingress -n zabbix zabbix-ingress
        
        echo ""
        echo "=== DNS Configuration Required ==="
        echo "Please configure your DNS to point dal2-devmon-mgt.forescout.com to the LoadBalancer IP"
        echo ""
        echo "=== Default Zabbix Credentials ==="
        echo "Username: Admin"
        echo "Password: zabbix"
        echo ""
        echo "=== Important Security Notes ==="
        echo "1. Change default Zabbix admin password immediately"
        echo "2. Update database passwords in production"
        echo "3. Configure SSL certificate for HTTPS"

    - name: Verify Deployment
      run: |
        echo "=== Verifying Zabbix Deployment ==="
        kubectl get all -n zabbix
        
        echo ""
        echo "=== Pod Status ==="
        kubectl get pods -n zabbix -o wide
        
        echo ""
        echo "=== Service Status ==="
        kubectl get services -n zabbix
        
        echo ""
        echo "=== Ingress Status ==="
        kubectl get ingress -n zabbix

  # Security and Post-Deployment
  post-deployment:
    needs: [deploy-infrastructure, deploy-zabbix, deploy-zabbix-only]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.deploy-zabbix.result == 'success' || needs.deploy-zabbix-only.result == 'success') && github.event.inputs.deployment_type != 'infrastructure-only' }}
    
    steps:
    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure Network Security
      run: |
        # Update NSG rules if needed
        echo "Configuring network security rules..."
        
        # Example: Restrict SSH access to specific IP ranges
        # az network nsg rule update \
        #   --resource-group ${{ needs.deploy-infrastructure.outputs.resource-group }} \
        #   --nsg-name nsg-aks-* \
        #   --name AllowSSH \
        #   --source-address-prefixes "YOUR-OFFICE-IP/32"

    - name: Setup Monitoring and Alerts
      run: |
        echo "Setting up monitoring and alerts..."
        # Add any monitoring configuration here

    - name: Generate Deployment Report
      run: |
        echo "=== Deployment Summary Report ===" > deployment-report.md
        echo "**Date:** $(date)" >> deployment-report.md
        echo "**Environment:** Production" >> deployment-report.md
        echo "**AKS Cluster:** ${{ needs.deploy-infrastructure.outputs.aks-cluster-name }}" >> deployment-report.md
        echo "**Resource Group:** ${{ needs.deploy-infrastructure.outputs.resource-group }}" >> deployment-report.md
        echo "**Container Registry:** ${{ needs.deploy-infrastructure.outputs.container-registry }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "**Next Steps:**" >> deployment-report.md
        echo "1. Configure DNS for dal2-devmon-mgt.forescout.com" >> deployment-report.md
        echo "2. Upload SSL certificate" >> deployment-report.md
        echo "3. Change default passwords" >> deployment-report.md
        echo "4. Configure Zabbix monitoring templates" >> deployment-report.md
        
        cat deployment-report.md

    - name: Upload Deployment Report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: deployment-report.md

  # Application-Only Deployment (uses existing AKS cluster)
  deploy-zabbix-only:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_type == 'application-only' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Display Application-Only Deployment Configuration
      run: |
        echo "=== Application-Only Deployment ==="
        echo "This deployment assumes AKS cluster already exists"
        echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "Reset Database: ${{ github.event.inputs.reset_database || 'false' }}"
        echo "Debug Mode: ${{ github.event.inputs.debug_mode || 'false' }}"

    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Find and Connect to Existing AKS Cluster
      run: |
        echo "üîç Connecting to AKS cluster ${{ env.AKS_CLUSTER_NAME }} in resource group ${{ env.AZURE_RESOURCE_GROUP }}..."
        
        # Get credentials
        az aks get-credentials \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        # Verify connection
        kubectl cluster-info
        kubectl get nodes
        
        echo "‚úÖ Connected to AKS cluster: ${{ env.AKS_CLUSTER_NAME }}"

    - name: Deploy Zabbix (Application Only)
      run: |
        echo "üöÄ Deploying Zabbix application to existing cluster..."
        
        # Install NGINX Ingress Controller if not present
        if ! kubectl get namespace ingress-nginx >/dev/null 2>&1; then
          echo "Installing NGINX Ingress Controller..."
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.replicaCount=2 \
            --set controller.service.type=LoadBalancer \
            --wait
        else
          echo "‚úÖ NGINX Ingress Controller already exists"
        fi
        
        # Deploy Zabbix namespace and configuration
        kubectl apply -f k8s/zabbix-config.yaml
        
        # Conditional cleanup based on user input
        if [ "${{ github.event.inputs.reset_database }}" = "true" ]; then
          echo "‚ö†Ô∏è Resetting all Zabbix resources and data..."
          kubectl delete all,pvc,configmap,secret -n zabbix --all --ignore-not-found=true
        else
          echo "üîÑ Performing smart cleanup (preserving data)..."
          kubectl delete deployment --all -n zabbix --ignore-not-found=true
          kubectl delete service --all -n zabbix --ignore-not-found=true
          kubectl delete ingress --all -n zabbix --ignore-not-found=true
        fi
        
        # Deploy MySQL
        kubectl apply -f k8s/zabbix-mysql.yaml
        kubectl wait --for=condition=ready pod -l app=zabbix-mysql -n zabbix --timeout=600s
        
        # Initialize database (with smart detection)
        # ... (reuse the database initialization logic from the main job)
        MYSQL_POD=$(kubectl get pods -n zabbix -l app=zabbix-mysql -o jsonpath='{.items[0].metadata.name}')
        DB_EXISTS=$(kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='zabbix';" 2>/dev/null | tail -n 1 || echo "0")
        
        if [ "${{ github.event.inputs.reset_database }}" = "true" ]; then
          DB_EXISTS="0"
        fi
        
        if [ "$DB_EXISTS" -lt "10" ]; then
          echo "üîß Initializing Zabbix database..."
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "DROP DATABASE IF EXISTS zabbix;"
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "CREATE DATABASE zabbix CHARACTER SET utf8 COLLATE utf8_bin;"
          kubectl exec -n zabbix $MYSQL_POD -- mysql -u root -pZabbixRoot123! -e "GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'%' IDENTIFIED BY 'zabbix123!';"
          kubectl apply -f k8s/zabbix-db-init-direct.yaml
          kubectl wait --for=condition=complete job/zabbix-db-init -n zabbix --timeout=600s || true
        fi
        
        # Deploy Zabbix components
        kubectl apply -f k8s/zabbix-additional.yaml
        kubectl wait --for=condition=available deployment/zabbix-java-gateway -n zabbix --timeout=300s
        
        kubectl apply -f k8s/zabbix-server.yaml
        kubectl wait --for=condition=available deployment/zabbix-server -n zabbix --timeout=300s
        
        kubectl apply -f k8s/zabbix-web.yaml
        kubectl wait --for=condition=available deployment/zabbix-web -n zabbix --timeout=300s
        
        kubectl apply -f k8s/zabbix-ingress.yaml
        
        echo "‚úÖ Application-only deployment completed!"
        
        # Display status
        kubectl get all -n zabbix
        kubectl get ingress -n zabbix

  # PowerShell-Only Deployment (Alternative for Azure CLI issues)
  deploy-infrastructure-powershell:
    runs-on: windows-latest
    environment: production
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force_powershell == 'true' }}
    outputs:
      aks-cluster-name: ${{ steps.deploy-pwsh-only.outputs.AKS_CLUSTER_NAME }}
      resource-group: ${{ steps.deploy-pwsh-only.outputs.AZURE_RESOURCE_GROUP }}
      container-registry: ${{ steps.deploy-pwsh-only.outputs.CONTAINER_REGISTRY_ENDPOINT }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: PowerShell-Only Azure Infrastructure Deployment
      id: deploy-pwsh-only
      shell: pwsh
      run: |
        Write-Host "üöÄ Starting PowerShell-only deployment (Azure CLI alternative)..." -ForegroundColor Cyan
        
        try {
          # Install Azure PowerShell modules
          Write-Host "üì¶ Installing Azure PowerShell modules..." -ForegroundColor Yellow
          Install-Module -Name Az -Force -AllowClobber -Scope CurrentUser -Repository PSGallery
          
          # Import required modules
          Import-Module Az.Accounts -Force
          Import-Module Az.Resources -Force
          
          # Parse credentials and authenticate
          $creds = '${{ secrets.AZURE_CREDENTIALS }}' | ConvertFrom-Json
          $securePassword = ConvertTo-SecureString $creds.clientSecret -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($creds.clientId, $securePassword)
          
          # Authenticate with Azure PowerShell
          Write-Host "üîê Authenticating with Azure PowerShell..." -ForegroundColor Blue
          $context = Connect-AzAccount -ServicePrincipal -Credential $credential -Tenant $creds.tenantId -Subscription "${{ env.AZURE_SUBSCRIPTION_ID }}"
          Write-Host "‚úÖ Authentication successful to: $($context.Context.Subscription.Name)" -ForegroundColor Green
          
          # Verify resource group access
          $resourceGroup = Get-AzResourceGroup -Name "${{ env.AZURE_RESOURCE_GROUP }}" -ErrorAction SilentlyContinue
          if (-not $resourceGroup) {
            throw "Cannot access resource group '${{ env.AZURE_RESOURCE_GROUP }}'"
          }
          Write-Host "‚úÖ Resource group access confirmed" -ForegroundColor Green
          
          # Deploy using PowerShell script
          $scriptPath = Join-Path $env:GITHUB_WORKSPACE "scripts" "deploy-infrastructure-pwsh.ps1"
          
          if (Test-Path $scriptPath) {
            Write-Host "üöÄ Executing PowerShell deployment script..." -ForegroundColor Cyan
            
            # Generate environment name with DevOps naming convention
            $envSuffix = "${{ github.event.inputs.environment_suffix }}"
            if ([string]::IsNullOrEmpty($envSuffix)) {
              $deploymentEnvName = "zabbix-devops-${{ env.AZURE_LOCATION }}-${{ github.run_number }}"
            } else {
              $deploymentEnvName = "zabbix-devops-${{ env.AZURE_LOCATION }}-${{ github.run_number }}-$envSuffix"
            }
            Write-Host "Deployment environment name: $deploymentEnvName" -ForegroundColor Yellow
            Write-Host "Resources will be named with pattern: resourcename-devops-${{ env.AZURE_LOCATION }}" -ForegroundColor Yellow
            
            & $scriptPath -ResourceGroupName "${{ env.AZURE_RESOURCE_GROUP }}" -Location "${{ env.AZURE_LOCATION }}" -EnvironmentName $deploymentEnvName -SubscriptionId "${{ env.AZURE_SUBSCRIPTION_ID }}"
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ PowerShell-only deployment completed successfully!" -ForegroundColor Green
            } else {
              throw "PowerShell deployment script failed with exit code $LASTEXITCODE"
            }
          } else {
            throw "PowerShell deployment script not found at: $scriptPath"
          }
          
        } catch {
          Write-Host "‚ùå PowerShell deployment failed: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }

  # Final Deployment Summary
  deployment-summary:
    needs: [deploy-infrastructure, deploy-zabbix, deploy-zabbix-only, deploy-infrastructure-powershell, post-deployment]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate Final Deployment Summary
      run: |
        echo "=== Final Deployment Summary ===" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- Type: ${{ github.event.inputs.deployment_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Force PowerShell: ${{ github.event.inputs.force_powershell || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Reset Database: ${{ github.event.inputs.reset_database || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Debug Mode: ${{ github.event.inputs.debug_mode || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Environment Suffix: ${{ github.event.inputs.environment_suffix || 'none' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "**Job Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- Infrastructure: ${{ needs.deploy-infrastructure.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Zabbix Application: ${{ needs.deploy-zabbix.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Application-Only: ${{ needs.deploy-zabbix-only.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- PowerShell Deployment: ${{ needs.deploy-infrastructure-powershell.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Post-Deployment: ${{ needs.post-deployment.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall success
        if [[ "${{ needs.deploy-zabbix.result }}" == "success" || "${{ needs.deploy-zabbix-only.result }}" == "success" ]]; then
          echo "**‚úÖ Overall Status: SUCCESS**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure DNS for dal2-devmon-mgt.forescout.com" >> $GITHUB_STEP_SUMMARY
          echo "2. Upload SSL certificate" >> $GITHUB_STEP_SUMMARY
          echo "3. Change default Zabbix admin password (Admin/zabbix)" >> $GITHUB_STEP_SUMMARY
          echo "4. Configure monitoring templates" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deploy-infrastructure.result }}" == "success" && "${{ github.event.inputs.deployment_type }}" == "infrastructure-only" ]]; then
          echo "**‚úÖ Infrastructure Deployment: SUCCESS**" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure is ready for application deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "**‚ùå Overall Status: FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Redeployment Options:**" >> $GITHUB_STEP_SUMMARY
        echo "- **Full Redeploy**: Use 'redeploy-clean' deployment type" >> $GITHUB_STEP_SUMMARY
        echo "- **App Only**: Use 'application-only' to redeploy just Zabbix" >> $GITHUB_STEP_SUMMARY
        echo "- **Infrastructure Only**: Use 'infrastructure-only' for infra changes" >> $GITHUB_STEP_SUMMARY
        echo "- **Reset Database**: Enable 'reset_database' option (‚ö†Ô∏è destroys data)" >> $GITHUB_STEP_SUMMARY
